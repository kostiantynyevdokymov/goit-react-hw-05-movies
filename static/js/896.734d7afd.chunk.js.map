{"version":3,"file":"static/js/896.734d7afd.chunk.js","mappings":"oPAEaA,E,QAAqBC,EAAAA,IAAH,mG,4BCgF/B,EA3EqB,WAAO,IAAD,IACzB,GAA0BC,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEAE,EACNN,EADMM,MAAOC,EACbP,EADaO,YAAaC,EAC1BR,EAD0BQ,WAAYC,EACtCT,EADsCS,aAAcC,EACpDV,EADoDU,SAAUC,EAC9DX,EAD8DW,OAE1DC,EAAQ,yCAAqCL,GAE7CM,EAAQ,qBADGC,EAAAA,EAAAA,MACSC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IACnCC,EAAU,IAAIC,KAAKT,GAAcU,cASvC,OAPAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAajB,GAASkB,MAAK,SAAAC,GACzBtB,EAASsB,EAAOC,MAChBrB,GAAU,EACX,GACF,GAAE,CAACC,KAGF,2BACGF,GACC,iCACE,UAAC,KAAD,CAAMuB,GAAIZ,EAAV,WACE,SAAC,MAAD,CAAaa,KAAK,OADpB,WAIA,UAAC7B,EAAD,YACE,gBAAK8B,IAAKf,EAAUgB,MAAM,MAAMC,IAAKvB,KACrC,4BACE,0BACGA,EADH,KACYW,EADZ,QAGA,yCAAiBa,KAAKC,MAAMvB,OAC5B,sCACA,uBAAIE,KACJ,mCACCC,EAAOqB,KAAI,SAAAC,GACV,OAAO,uBAAmBA,EAAMC,MAAjBD,EAAME,GACtB,KACD,mBACA,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMV,GAAG,OAAOV,MAAO,CAAEC,KAAMH,GAA/B,qBAIF,yBACE,SAAC,KAAD,CAAMY,GAAG,SAASV,MAAO,CAAEC,KAAMH,GAAjC,0BAKJ,4BAKN,SAAC,KAAD,CACEuB,SAAS,EACTC,OAAO,KACPT,MAAM,KACNU,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAW,UACXC,MAAM,aAGV,SAAC,KAAD,MAGL,C,4MC9EKC,EAAM,mCACZC,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAc,mCAAG,WAAMC,GAAN,uFACLF,IAAAA,IAAA,sCACUD,EADV,iBACsBG,IAFjB,cACtBC,EADsB,yBAIrBA,EAASvB,MAJY,2CAAH,sDAMdH,EAAY,mCAAG,WAAMc,GAAN,uFACHS,IAAAA,IAAA,iBACXT,EADW,oBACGQ,EADH,oBADG,cACpBI,EADoB,yBAInBA,GAJmB,2CAAH,sDAOZC,EAAe,mCAAG,WAAMb,GAAN,uFACNS,IAAAA,IAAA,gBACZT,EADY,4BACUQ,EADV,2BADM,cACvBI,EADuB,yBAItBA,EAASvB,KAAKyB,SAJQ,2CAAH,sDAOfC,EAAe,mCAAG,WAAMf,GAAN,uFACNS,IAAAA,IAAA,iBACXT,EADW,4BACWQ,EADX,oBADM,cACvBI,EADuB,yBAItBA,EAASvB,KAAK2B,MAJQ,2CAAH,sDAMfC,EAAc,mCAAG,WAAON,EAAMO,GAAb,uFACLT,IAAAA,IAAA,+BACGD,EADH,kBACgBU,EADhB,iBAC8BP,IAFzB,cACtBC,EADsB,yBAIrBA,EAASvB,MAJY,2CAAH,uD","sources":["components/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails.jsx","servies/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MovieDetailsStyled = styled.div`\n  display: flex;\n  gap: 10px;\n\n  & > div {\n    max-width: 400px;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { Link, useLocation, useParams, Outlet } from 'react-router-dom';\nimport { getMovieInfo } from 'servies/api';\nimport { MovieDetailsStyled } from 'components/MovieDetails/MovieDetails.styled';\nimport { MagnifyingGlass } from 'react-loader-spinner';\nimport { BiArrowBack } from 'react-icons/bi';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({});\n  const [isLoad, setIsLoad] = useState(false);\n  const { movieId } = useParams();\n\n  const { title, poster_path, popularity, release_date, overview, genres } =\n    movie;\n  const imageURL = `https://image.tmdb.org/t/p/w500${poster_path}`;\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n  const relYear = new Date(release_date).getFullYear();\n\n  useEffect(() => {\n    getMovieInfo(movieId).then(result => {\n      setMovie(result.data);\n      setIsLoad(true);\n    });\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoad ? (\n        <>\n          <Link to={backLink}>\n            <BiArrowBack size=\"10\" />\n            Back\n          </Link>\n          <MovieDetailsStyled>\n            <img src={imageURL} width=\"300\" alt={title} />\n            <div>\n              <h2>\n                {title} ({relYear})\n              </h2>\n              <h4>User score: {Math.round(popularity)}</h4>\n              <h3>Overview</h3>\n              <p>{overview}</p>\n              <h3>Genres</h3>\n              {genres.map(genre => {\n                return <p key={genre.id}>{genre.name}</p>;\n              })}\n              <hr />\n              <h2>Additional information</h2>\n              <ul>\n                <li>\n                  <Link to=\"cast\" state={{ from: backLink }}>\n                    Cast\n                  </Link>\n                </li>\n                <li>\n                  <Link to=\"review\" state={{ from: backLink }}>\n                    Review\n                  </Link>\n                </li>\n              </ul>\n              <hr />\n            </div>\n          </MovieDetailsStyled>\n        </>\n      ) : (\n        <MagnifyingGlass\n          visible={true}\n          height=\"80\"\n          width=\"80\"\n          ariaLabel=\"MagnifyingGlass-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"MagnifyingGlass-wrapper\"\n          glassColor=\"#c0efff\"\n          color=\"#e15b64\"\n        />\n      )}\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst KEY = 'e914dc562e3389b2ab90edc656f15a40';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendMovies = async page => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=${KEY}&page=${page}`\n  );\n  return response.data;\n};\nexport const getMovieInfo = async id => {\n  const response = await axios.get(\n    `/movie/${id}?api_key=${KEY}&language=en-US`\n  );\n  return response;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(\n    `/movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\nexport const getSearchQuery = async (page, query) => {\n  const response = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&page=${page}`\n  );\n  return response.data;\n};\n"],"names":["MovieDetailsStyled","styled","useState","movie","setMovie","isLoad","setIsLoad","movieId","useParams","title","poster_path","popularity","release_date","overview","genres","imageURL","backLink","useLocation","state","from","relYear","Date","getFullYear","useEffect","getMovieInfo","then","result","data","to","size","src","width","alt","Math","round","map","genre","name","id","visible","height","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","KEY","axios","getTrendMovies","page","response","getMovieReviews","results","getMovieCredits","cast","getSearchQuery","query"],"sourceRoot":""}